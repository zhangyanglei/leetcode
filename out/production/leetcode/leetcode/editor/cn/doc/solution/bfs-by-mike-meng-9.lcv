1. 题目看起来很复杂，但是仔细阅读其实本题非常简单，用DFS或者BFS均可解答,坑爹的是贪吃蛇可以平移。
2. 主要是我们用```(x,y,d)```,来记录当前的状态，```(x,y)```代表当前贪吃蛇头部所在的位置，```d```代表当前所处的方向,水平或者垂直。我们用```d = 0```代表当前处在水平方向，```d = 1```代表当前处在垂直方向。
3. 我们设置状态```dp[x][y][i]```,代表贪吃蛇处在```(x,y)```位置处，且处于```i```方向。
4. 后续的状态和位置分为三类，状态转移方程如下:
   $$ (x,y,0) = \left\{
   \begin
   (x,y+1,0) &  & {if \: grid[x][y+1] == 0} \\
   &  &   \\
   (x+1,y,0) &   &{if \: grid[x+1][y-1] == 0 \: and \: grid[x+1][y] == 0 } \\
   &  &   \\
   (x+1,y-1,1) &   &{if \: grid[x+1][y-1] == 0 \: and \: grid[x+1][y] == 0 } \\
   \end \right.$$

$$ (x,y,1) = \left\{
\begin
(x+1,y,1) &  & {if \: grid[x+1][y] == 0} \\
&  &   \\
(x,y+1,1) &   &{if \: grid[x-1][y+1] == 0 \: and \: grid[x][y+1] == 0 } \\
&  &   \\
(x-1,y+1,0) &   &{if \: grid[x-1][y+1] == 0 \: and \: grid[x][y+1] == 0 } \\
\end \right.$$
5. 由题意可以知道终点为```(r-1,c-1,0)```.通过BFS很快就可以求得最小步骤.

* []

```c++
#define RIGHT 0
#define DOWN 1
typedef pair<int,int> pii;

class Solution {
public:
    int minimumMoves(vector<vector<int>>& grid) {
        int r = grid.size();
        int c = grid[0].size();
        int step = 0;
        queue<pii> qu;
        int dp[100][100][2];
        
        /*intial*/
        memset(dp,0,sizeof(dp));
        dp[0][1][RIGHT] = 1;
        qu.push(make_pair(1,RIGHT));
        
        while(!qu.empty()){
            int sz = qu.size();
            
            for(int i = 0;i < sz; ++i){
                pii curr = qu.front();
                qu.pop();
                int x = curr.first/c;
                int y = curr.first%c;
                int d = curr.second;
                
                if( x == r-1 && y == c-1 && d == RIGHT){
                    return step;
                }
                
                if(d == RIGHT){
                    /*right*/
                    if(y < c-1 && grid[x][y+1] != 1){
                        if(!dp[x][y+1][RIGHT]){
                            dp[x][y+1][RIGHT] = 1;
                            qu.push(make_pair(x*c+y+1,RIGHT));
                        }
                    }
                    /*down*/
                    if(x < r-1 && grid[x+1][y-1] == 0 && grid[x+1][y] == 0){
                        if(!dp[x+1][y][RIGHT]){
                            dp[x+1][y][RIGHT] = 1;
                            qu.push(make_pair((x+1)*c+y,RIGHT));
                        }
                        if(!dp[x+1][y-1][DOWN]){
                            dp[x+1][y-1][DOWN] = 1;
                            qu.push(make_pair((x+1)*c+y-1,DOWN));
                        }
                    }
                }else if(d == DOWN){
                    /*down*/
                    if(x < r-1 && grid[x+1][y] != 1){
                        if(!dp[x+1][y][DOWN]){
                            dp[x+1][y][DOWN] = 1;
                            qu.push(make_pair((x+1)*c+y,DOWN));
                        } 
                    }
                    /*right*/
                    if(y < c-1 && grid[x-1][y+1] == 0 && grid[x][y+1] == 0){
                        if(!dp[x][y+1][DOWN]){
                            dp[x][y+1][DOWN] = 1;
                            qu.push(make_pair(x*c+y+1,DOWN));
                        } 
                        if(!dp[x-1][y+1][RIGHT]){
                            dp[x-1][y+1][RIGHT] = 1;
                            qu.push(make_pair((x-1)*c+y+1,RIGHT));
                        } 
                    }
                }
            }
            step++;
        }
        
        return -1;
    }
};
```

* []

```python
import queue
class Solution:
    def minimumMoves(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        vis = [[0 for _ in range(2)] for _ in range(m*n)]
        qu = queue.Queue()
        
        vis[1][0] = 1
        qu.put((1,0))
        step = -1
        
        while not qu.empty():
            sz = qu.qsize()
            step += 1
            
            for i in range(sz):
                curr = qu.get()
                x = curr[0]//m
                y = curr[0]%n
                d = curr[1]
                
                if x == m-1 and y == n-1 and d == 0:
                    return step
                
                if d == 0:
                    if y < n-1 and grid[x][y+1] == 0: 
                        if vis[x*n+y+1][0] == 0:
                            vis[x*n+y+1][0] = 1
                            qu.put((x*n+y+1,0))
                    if x < m-1 and grid[x+1][y-1] == 0 and grid[x+1][y] == 0: 
                        if vis[(x+1)*n+y][0] == 0:
                            vis[(x+1)*n+y][0] = 1
                            qu.put(((x+1)*n+y,0))
                        if vis[(x+1)*n+y-1][1] == 0:
                            vis[(x+1)*n+y-1][1] = 1
                            qu.put(((x+1)*n+y-1,1))
                else:
                    if x < m-1 and grid[x+1][y] == 0: 
                        if vis[(x+1)*n+y][1] == 0:
                            vis[(x+1)*n+y][1] = 1
                            qu.put(((x+1)*n+y,1))
                    if y < n-1 and grid[x-1][y+1] == 0 and grid[x][y+1] == 0: 
                        if vis[x*n+y+1][1] == 0:
                            vis[x*n+y+1][1] = 1
                            qu.put((x*n+y+1,1))
                        if vis[(x-1)*n+y+1][0] == 0:
                            vis[(x-1)*n+y+1][0] = 1
                            qu.put(((x-1)*n+y+1,0))
        
        return -1                
```

