## 动态规划

这是一道「[最长公共子序列（LCS）](https://leetcode-cn.com/problems/longest-common-subsequence/solution/gong-shui-san-xie-zui-chang-gong-gong-zi-xq0h/)」的轻度变形题。

为了让你更好的与「[最长公共子序列（LCS）](https://leetcode-cn.com/problems/longest-common-subsequence/solution/gong-shui-san-xie-zui-chang-gong-gong-zi-xq0h/)」裸题进行对比，我们使用 $s1$ 代指 $nums1$，$s2$ 代指 $nums2$。

对于这类题都使用如下「状态定义」即可：

**$f[i][j]$ 代表考虑 $s1$ 的前 $i$ 个字符、考虑 $s2$ 的前 $j$ 的字符，形成的最长公共子序列长度。**

然后不失一般性的考虑 $f[i][j]$ 如何转移。

**由于我们的「状态定义」只是说「考虑前 $i$ 个和考虑前 $j$ 个字符」，并没有说「一定要包含第 $i$ 个或者第 $j$ 个字符」（这也是「最长公共子序列 LCS」与「最长上升子序列 LIS」状态定义上的最大不同）。**

我们需要考虑「不包含 $s1[i]$，不包含 $s2[j]$」、「不包含 $s1[i]$，包含 $s2[j]$」「包含 $s1[i]$，不包含 $s2[j]$」、「包含 $s1[i]$，包含 $s2[j]$」四种情况：

* 不包含 $s1[i]$，不包含 $s2[j]$：结合状态定义，可以使用 $f[i - 1][j - 1]$ 进行精确表示。
* 包含 $s1[i]$，包含 $s2[j]$：前提是 $s1[i] = s2[j]$，可以使用 $f[i - 1][j - 1] + 1$ 进行精确表示。
* 不包含 $s1[i]$，包含 $s2[j]$：结合状态定义，我们无法直接将该情况表示出来。
  **注意 $f[i - 1][j]$ 只是表示「必然不包含 $s1[i]$，但可能包含$s2[j]$」的情况，也就是说 $f[i - 1][j]$ 其实是该情况与情况 $1$ 的合集**。
  但是由于我们求的是「最大值」，只需要确保「不漏」即可保证答案的正确（某些情况被重复参与比较不影响正确性），因此这里直接使用 $f[i - 1][j]$ 进行表示没有问题。
* 包含 $s1[i]$，不包含 $s2[j]$：与情况 $3$ 同理，直接使用 $f[i][j - 1]$ 表示没有问题。

$f[i][j]$ 就是在上述所有情况中取 $max$ 而来，由于情况 $1$ 被 情况 $3$ 和 情况 $4$ 所包含，因此我们只需要考虑 $f[i - 1][j]$、$f[i][j -1]$ 和 $f[i - 1][j - 1] + 1$ 三种状态即可，其中最后一种状态需要满足 $s1[i] = s2[j]$ 前提条件。

因此我们最后的状态转移方程为：

$$
f[i][j]=\begin
\max(f[i - 1][j], f[i][j - 1], f[i - 1][j - 1] + 1) & s1[i] = s2[j] \\
\max(f[i - 1][j], f[i][j - 1]) & s1[i] \neq s2[j] \\
\end
$$

上述分析过程建议加深理解，估计很多同学能 AC 但其实并不知道 LCS 问题的状态转移是包含了「重复状态比较」的。

代码：

* []

```Java
class Solution {
    public int maxUncrossedLines(int[] s1, int[] s2) {
        int n = s1.length, m = s2.length;
        int[][] f = new int[n + 1][m + 1];
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                f[i][j] = Math.max(f[i - 1][j], f[i][j - 1]);
                if (s1[i - 1] == s2[j - 1]) {
                    f[i][j] = Math.max(f[i][j], f[i - 1][j - 1] + 1);
                }
            }
        }
        return f[n][m];
    }
}
```

* 时间复杂度：$O(n * m)$
* 空间复杂度：$O(n * m)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解
