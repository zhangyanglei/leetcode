//在节点网络中，只有当 graph[i][j] = 1 时，每个节点 i 能够直接连接到另一个节点 j。
//
// 一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传
//播将继续，直到没有更多的节点可以被这种方式感染。 
//
// 假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。 
//
// 如果从初始列表中移除某一节点能够最小化 M(initial)， 返回该节点。如果有多个节点满足条件，就返回索引最小的节点。 
//
// 请注意，如果某个节点已从受感染节点的列表 initial 中删除，它以后可能仍然因恶意软件传播而受到感染。 
//
// 
//
// 
// 
//
// 示例 1： 
//
// 
//输入：graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
//输出：0
// 
//
// 示例 2： 
//
// 
//输入：graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
//输出：0
// 
//
// 示例 3： 
//
// 
//输入：graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
//输出：1
// 
//
// 
//
// 提示： 
//
// 
// 1 < graph.length = graph[0].length <= 300 
// 0 <= graph[i][j] == graph[j][i] <= 1 
// graph[i][i] == 1 
// 1 <= initial.length < graph.length 
// 0 <= initial[i] < graph.length 
// 
// Related Topics 深度优先搜索 广度优先搜索 并查集 数组 矩阵 👍 61 👎 0


package leetcode.editor.cn;

import java.util.Arrays;

public class MinimizeMalwareSpread {
    public static void main(String[] args) {
        Solution solution = new MinimizeMalwareSpread().new Solution();
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        /**
         * 给连通分量上色： 遍历每个节点，如果它还没有颜色，就用深度优先搜索去遍历它所在的连通分量，同时给这个连通分量标上新的颜色。
         * 计算每个连通分量的大小： 数一下每个颜色的节点各有多少个。
         * 找到唯一的颜色： 找到 initial 中颜色唯一的节点。
         * 选择答案： 对于 initial 中颜色唯一的节点，计算这个颜色节点的个数。从中选出最大节点个数的那个，如果有多个最优解，选择其中节点下标最小的。
         * 如果没有颜色唯一的节点，直接返回 min(initial)。
         */
        public int minMalwareSpread(int[][] graph, int[] initial) {
            // 1. Color each component.
            // colors[node] = the color of this node.

            int N = graph.length;
            int[] colors = new int[N];
            Arrays.fill(colors, -1);
            int C = 0;

            for (int node = 0; node < N; ++node) {
                if (colors[node] == -1) {
                    dfs(graph, colors, node, C++);
                }
            }

            // 2. Size of each color.
            int[] size = new int[C];
            for (int color : colors) {
                size[color]++;
            }

            // 3. Find unique colors.
            int[] colorCount = new int[C];
            for (int node : initial) {
                colorCount[colors[node]]++;
            }

            // 4. Answer
            int ans = Integer.MAX_VALUE;
            for (int node : initial) {
                int c = colors[node];
                if (colorCount[c] == 1) {
                    if (ans == Integer.MAX_VALUE) {
                        ans = node;
                    } else if (size[c] > size[colors[ans]]) {
                        ans = node;
                    } else if (size[c] == size[colors[ans]] && node < ans) {
                        ans = node;
                    }
                }
            }

            if (ans == Integer.MAX_VALUE) {
                for (int node : initial) {
                    ans = Math.min(ans, node);
                }
            }

            return ans;
        }

        public void dfs(int[][] graph, int[] colors, int node, int color) {
            colors[node] = color;
            for (int nei = 0; nei < graph.length; ++nei) {
                if (graph[node][nei] == 1 && colors[nei] == -1) {
                    dfs(graph, colors, nei, color);
                }
            }
        }

    }

    //leetcode submit region end(Prohibit modification and deletion)

}
